generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String           @id @default(uuid())
  type          OrganizationType @default(local)
  name          String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accessControl AccessControl[]
  actions       Action[]
  auditLogs     AuditLog[]
  saml          SamlConfig?
  services      ServicesConfig[]
  users         User[]
}

model User {
  id                String       @id @default(uuid())
  name              String?
  email             String       @unique
  organizationId    String
  password          String?
  loginType         LoginType    @default(local)
  role              UserRole     @default(user)
  nameID            String?      @unique
  nameIDFormat      String?
  sessionIndex      String?
  lastLogin         DateTime?
  verifiedDevices   Json[]
  twoFactorSecret   String?
  twoFactorVerified Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  auditLogs         AuditLog[]
  organization      Organization @relation(fields: [organizationId], references: [id])
}

model Action {
  id              String       @id @default(uuid())
  name            String
  actionType      ActionType
  triggerType     TriggerType
  config          Json
  schedulerConfig Json?
  enabled         Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}

model SamlConfig {
  id                             String       @id @default(uuid())
  entityId                       String
  metadataUrl                    String
  serviceProviderX509Certificate String
  serviceProviderPrivateKey      String
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt
  organizationId                 String       @unique
  organization                   Organization @relation(fields: [organizationId], references: [id])
}

model ServicesConfig {
  id             String       @id @default(uuid())
  type           ServiceType
  name           String
  config         Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model AccessControl {
  id             String       @id @default(uuid())
  email          String       @unique
  organizationId String
  isAllowed      Boolean      @default(true)
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model AuditLog {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  action         String
  details        Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

enum OrganizationType {
  local
  cloud
}

enum LoginType {
  local
  saml
}

enum UserRole {
  root
  admin
  user
}

enum ServiceType {
  aws
  digital_ocean
  gcp
}

enum ActionType {
  add_inbound_rule
  remove_inbound_rule
  remove_all_inbound_rules
  send_email_notification
  send_slack_notification
}

enum TriggerType {
  user_login
  user_logout
  user_created
  scheduled_job
  page_refresh
}
